`timescale 1ns/1ps

module MEMORY(
	clk,
	rst,
	XM_MemtoReg,
	XM_RegWrite,
	XM_MemRead,
	XM_MemWrite,
	ALUout,
	XM_RD,
	XM_MD,

	MW_MemtoReg,
	MW_RegWrite,
	MW_ALUout,
	MDR,
	MW_RD,
	
	sw
);
input clk, rst, XM_MemtoReg, XM_RegWrite, XM_MemRead, XM_MemWrite;

input [31:0] ALUout;
input [4:0] XM_RD;
input [31:0] XM_MD;

input [12:0] sw;


output reg MW_MemtoReg, MW_RegWrite;
output reg [31:0]	MW_ALUout, MDR;
output reg [4:0]	MW_RD;

//data memory
reg [31:0] DM [0:127];
reg [31:0] i;

always @(posedge clk or posedge rst)
begin
    if(rst) begin
        DM[0] <= {19'b0,sw};
        DM[1] <= 32'b00000000000000000000000001010010;
        DM[2] <= 32'b00000000000000000000000001010010;
        DM[3] <= 32'b00000000000000000000000000000000;
        DM[4] <= 32'b00000000000000000000000000000010;
        DM[5] <= 32'b00000000000000000000000000000011;
        DM[6] <= 32'b00000000000000000000000000000111;
        DM[7] <= 32'b00000000000000000000000000010111;
        DM[8] <= 32'b00000000000000000000000001011001;
        DM[9] <= 32'b00000000000000000000000001110001;
        DM[10] <= 32'b00000000000000000000001000001011;
        DM[11] <= 32'b00000000000000000000001101110111;
        DM[12] <= 32'b00000000000000000000010001101001;
        DM[13] <= 32'b00000000000000000000010100101111;
        DM[14] <= 32'b00000000000000000010010101001111;
        DM[15] <= 32'b00000000000000000011110101000011;
        DM[16] <= 32'b00000000000000000100110010011001;
        DM[17] <= 32'b00000000000000000111101010100101;
        DM[18] <= 32'b00000000000000100110000100010001;
        DM[19] <= 32'b00000000000001011000000011001101;
        DM[20] <= 32'b00000000000001011010011001010101;
        DM[21] <= 32'b00000000000001111000001001010001;
        DM[22] <= 32'b00000000000101001001011110011101;
        DM[23] <= 32'b00000000000101001011010110010001;
        DM[24] <= 32'b00000000000111101010111001101101;
        DM[25] <= 32'b00000000010001101111110101000001;
        DM[26] <= 32'b00000001000001000011000000111011;
        DM[27] <= 32'b00000001001111011101110001011011;
        DM[28] <= 32'b00000010110100100010010111100101;
        DM[29] <= 32'b00000111010010000001011000001011;
        DM[30] <= 32'b00001011010011101000011010101011;
        DM[31] <= 32'b00001011011100000101101101001111;
        DM[32] <= 32'b00010111000100101001111001000101;
        DM[33] <= 32'b00011010000000001111111101110001;
        DM[34] <= 32'b01001101001001001111100001001011;
        DM[35] <= 32'b01010110100111011001011000001101;
        DM[36] <= 32'b10001001001001011001100011010101;
        DM[37] <= 32'b11100101000010011001011001010101;
        DM[38] <= 32'b11111111111111111111111111111111;
        DM[39] <= 32'b00000000000000000000000000000000;
        DM[40] <= 32'b00000000000000000000000000000001;
        DM[41] <= 32'b00000000000000000000000000000010;
        DM[42] <= 32'b00000000000000000000000000000100;
        DM[43] <= 32'b00000000000000000000000000000110;
        DM[44] <= 32'b00000000000000000000000000001000;
        DM[45] <= 32'b00000000000000000000000000001110;
        DM[46] <= 32'b00000000000000000000000000010010;
        DM[47] <= 32'b00000000000000000000000000010100;
        DM[48] <= 32'b00000000000000000000000000010110;
        DM[49] <= 32'b00000000000000000000000000100010;
        DM[50] <= 32'b00000000000000000000000000100100;
        DM[51] <= 32'b00000000000000000000000000101100;
        DM[52] <= 32'b00000000000000000000000000110100;
        DM[53] <= 32'b00000000000000000000000001001000;
        DM[54] <= 32'b00000000000000000000000001010110;
        DM[55] <= 32'b00000000000000000000000001100000;
        DM[56] <= 32'b00000000000000000000000001110000;
        DM[57] <= 32'b00000000000000000000000001110010;
        DM[58] <= 32'b00000000000000000000000001110110;
        DM[59] <= 32'b00000000000000000000000010000100;
        DM[60] <= 32'b00000000000000000000000010010100;
        DM[61] <= 32'b00000000000000000000000010011010;
        DM[62] <= 32'b00000000000000000000000010110100;
        DM[63] <= 32'b00000000000000000000000011010010;
        DM[64] <= 32'b00000000000000000000000011011100;
        DM[65] <= 32'b00000000000000000000000011011110;
        DM[66] <= 32'b00000000000000000000000011101010;
        DM[67] <= 32'b00000000000000000000000011111000;
        DM[68] <= 32'b00000000000000000000000011111010;
        DM[69] <= 32'b00000000000000000000000100011010;
        DM[70] <= 32'b00000000000000000000000100100000;
        DM[71] <= 32'b00000000000000000000000100100100;
        DM[72] <= 32'b00000000000000000000000101000000;
        DM[73] <= 32'b00000000000000000000000101010000;
        DM[74] <= 32'b00000000000000000000000101010000;
        
        for (i=75; i<128; i=i+1) DM[i] <= 32'b0;
    end
    else begin
        if(XM_MemWrite)
            DM[ALUout[8:2]] <= XM_MD;
    end
end

always @(posedge clk or posedge rst)
	if (rst) begin
		MW_MemtoReg 		<= 1'b0;
		MW_RegWrite 		<= 1'b0;
		MDR					<= 32'b0;
		MW_ALUout			<= 32'b0;
		MW_RD				<= 5'b0;
	end
	else begin
		MW_MemtoReg 		<= XM_MemtoReg;
		MW_RegWrite 		<= XM_RegWrite;
		MDR					<= (XM_MemRead)?DM[ALUout[8:2]]:MDR;
		MW_ALUout			<= ALUout;
		MW_RD 				<= XM_RD;
	end

endmodule
